import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, ConversationHandler
from datetime import datetime
import json
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SELECTING_CATEGORY, VIEWING_PRODUCT, CART, CHECKOUT = range(4)

# –î–∞–Ω–Ω—ã–µ –æ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —ç—Ç–æ –±—ã–ª–∞ –±—ã –ë–î)
BIKES_DATA = {
    'folding': {
        'name': 'üì¶ –°–∫–ª–∞–¥–Ω—ã–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã',
        'bikes': [
            {'id': 1, 'name': 'Stels Folding Pro', 'price': 15000, 'description': '–õ–µ–≥–∫–∏–π —Å–∫–ª–∞–¥–Ω–æ–π –≤–µ–ª–æ—Å–∏–ø–µ–¥ –¥–ª—è –≥–æ—Ä–æ–¥–∞'},
            {'id': 2, 'name': 'Forward Compact', 'price': 12000, 'description': '–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∏ —É–¥–æ–±–Ω—ã–π'},
        ]
    },
    'mountain': {
        'name': 'üèîÔ∏è –ì–æ—Ä–Ω—ã–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã',
        'bikes': [
            {'id': 3, 'name': 'GT Aggressor Pro', 'price': 35000, 'description': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–Ω—ã–π –≤–µ–ª–æ—Å–∏–ø–µ–¥'},
            {'id': 4, 'name': 'Trek Marlin 5', 'price': 28000, 'description': '–ù–∞–¥–µ–∂–Ω—ã–π –¥–ª—è —Ç—Ä–µ–π–ª–æ–≤'},
        ]
    },
    'hybrid': {
        'name': 'üö¥ –ì–∏–±—Ä–∏–¥–Ω—ã–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã',
        'bikes': [
            {'id': 5, 'name': 'Scott Sub Cross', 'price': 32000, 'description': '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–ª—è –≥–æ—Ä–æ–¥–∞ –∏ –ª–µ–≥–∫–æ–≥–æ –±–µ–∑–¥–æ—Ä–æ–∂—å—è'},
            {'id': 6, 'name': 'Cannondale Quick', 'price': 25000, 'description': '–ö–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π'},
        ]
    },
    'road': {
        'name': 'üèÅ –®–æ—Å—Å–µ–π–Ω—ã–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã',
        'bikes': [
            {'id': 7, 'name': 'Specialized Allez', 'price': 45000, 'description': '–õ–µ–≥–∫–∏–π –∏ –±—ã—Å—Ç—Ä—ã–π —à–æ—Å—Å–µ–π–Ω–∏–∫'},
            {'id': 8, 'name': 'Bianchi Via Nirone', 'price': 52000, 'description': '–ö–ª–∞—Å—Å–∏–∫–∞ –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ –±—Ä–µ–Ω–¥–∞'},
        ]
    }
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ—Ä–∑–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ - –ë–î)
user_carts = {}

async def start(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = update.message.from_user
    logger.info(f"User {user.first_name} started the conversation")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_carts[user.id] = []
    
    keyboard = [
        [KeyboardButton("üì¶ –°–∫–ª–∞–¥–Ω—ã–µ"), KeyboardButton("üèîÔ∏è –ì–æ—Ä–Ω—ã–µ")],
        [KeyboardButton("üö¥ –ì–∏–±—Ä–∏–¥–Ω—ã–µ"), KeyboardButton("üèÅ –®–æ—Å—Å–µ–π–Ω—ã–µ")],
        [KeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞"), KeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üö¥‚Äç‚ôÇÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤:",
        reply_markup=reply_markup
    )
    
    return SELECTING_CATEGORY

async def handle_category_selection(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    text = update.message.text
    user = update.message.from_user
    
    category_map = {
        "üì¶ –°–∫–ª–∞–¥–Ω—ã–µ": "folding",
        "üèîÔ∏è –ì–æ—Ä–Ω—ã–µ": "mountain", 
        "üö¥ –ì–∏–±—Ä–∏–¥–Ω—ã–µ": "hybrid",
        "üèÅ –®–æ—Å—Å–µ–π–Ω—ã–µ": "road"
    }
    
    if text in category_map:
        category = category_map[text]
        context.user_data['current_category'] = category
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        bikes = BIKES_DATA[category]['bikes']
        
        keyboard = []
        for bike in bikes:
            keyboard.append([KeyboardButton(f"üö≤ {bike['name']} - {bike['price']}‚ÇΩ")])
        
        keyboard.append([KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), KeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞")])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            f"üè∑Ô∏è {BIKES_DATA[category]['name']}:\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=reply_markup
        )
return VIEWING_PRODUCT
    
    elif text == "üõí –ö–æ—Ä–∑–∏–Ω–∞":
        return await show_cart(update, context)
    elif text == "‚ÑπÔ∏è –û –Ω–∞—Å":
        await update.message.reply_text(
            "üè™ –ú–∞–≥–∞–∑–∏–Ω 'BikeShop'\n\n"
            "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67\n"
            "üìç –ê–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –í–µ–ª–æ—Å–∏–ø–µ–¥–Ω–∞—è, 1\n"
            "‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 10:00 - 20:00\n\n"
            "–õ—É—á—à–∏–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ü–µ–Ω–∞–º!"
        )
        return SELECTING_CATEGORY
    
    return SELECTING_CATEGORY

async def handle_product_selection(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞"""
    text = update.message.text
    user = update.message.from_user
    
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return await start(update, context)
    elif text == "üõí –ö–æ—Ä–∑–∏–Ω–∞":
        return await show_cart(update, context)
    
    # –ò—â–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–µ–ª–æ—Å–∏–ø–µ–¥
    current_category = context.user_data.get('current_category', 'folding')
    bikes = BIKES_DATA[current_category]['bikes']
    
    selected_bike = None
    for bike in bikes:
        if f"üö≤ {bike['name']} - {bike['price']}‚ÇΩ" in text:
            selected_bike = bike
            break
    
    if selected_bike:
        context.user_data['selected_bike'] = selected_bike
        
        keyboard = [
            [KeyboardButton("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É")],
            [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"), KeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            f"üö≤ {selected_bike['name']}\n\n"
            f"üìù {selected_bike['description']}\n"
            f"üí∞ –¶–µ–Ω–∞: {selected_bike['price']}‚ÇΩ\n\n"
            f"–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –≤–µ–ª–æ—Å–∏–ø–µ–¥ –≤ –∫–æ—Ä–∑–∏–Ω—É?",
            reply_markup=reply_markup
        )
        
        return VIEWING_PRODUCT
    
    return VIEWING_PRODUCT

async def add_to_cart(update: Update, context: CallbackContext) -> int:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    user = update.message.from_user
    selected_bike = context.user_data.get('selected_bike')
    
    if selected_bike:
        user_carts[user.id].append(selected_bike)
        await update.message.reply_text(f"‚úÖ {selected_bike['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
    
    return await handle_category_selection(update, context)

async def show_cart(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.message.from_user
    cart = user_carts.get(user.id, [])
    
    if not cart:
        keyboard = [[KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞",
            reply_markup=reply_markup
        )
        return SELECTING_CATEGORY
    
    total = sum(item['price'] for item in cart)
    cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    
    for i, item in enumerate(cart, 1):
        cart_text += f"{i}. {item['name']} - {item['price']}‚ÇΩ\n"
    
    cart_text += f"\nüí∞ –ò—Ç–æ–≥–æ: {total}‚ÇΩ"
    
    keyboard = [
        [KeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")],
        [KeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"), KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(cart_text, reply_markup=reply_markup)
    
    return CART

async def handle_cart_actions(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    text = update.message.text
    user = update.message.from_user
    
    if text == "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑":
        return await checkout(update, context)
    elif text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É":
        user_carts[user.id] = []
        await update.message.reply_text("üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")
        return await start(update, context)
    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º":
        return await start(update, context)
    
    return CART

async def checkout(update: Update, context: CallbackContext) -> int:
"""–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    user = update.message.from_user
    cart = user_carts.get(user.id, [])
    
    if not cart:
        await update.message.reply_text("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return await start(update, context)
    
    total = sum(item['price'] for item in cart)
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    order_text = f"üì¶ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
    for item in cart:
        order_text += f"‚Ä¢ {item['name']} - {item['price']}‚ÇΩ\n"
    order_text += f"\nüí∞ –ò—Ç–æ–≥–æ: {total}‚ÇΩ\n\n"
    order_text += "üìû –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞!"
    
    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
    user_carts[user.id] = []
    
    keyboard = [[KeyboardButton("üîÑ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(order_text, reply_markup=reply_markup)
    
    return SELECTING_CATEGORY

async def cancel(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    user = update.message.from_user
    logger.info(f"User {user.first_name} canceled the conversation.")
    await update.message.reply_text(
        '–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã, –Ω–∞–ø–∏—à–∏—Ç–µ /start',
        reply_markup=ReplyKeyboardMarkup([['/start']], resize_keyboard=True)
    )
    
    return ConversationHandler.END

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π)
    TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"
    
    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token(TOKEN).build()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECTING_CATEGORY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_category_selection)
            ],
            VIEWING_PRODUCT: [
                MessageHandler(filters.Regex("^‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É$"), add_to_cart),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_product_selection)
            ],
            CART: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_cart_actions)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    application.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()
