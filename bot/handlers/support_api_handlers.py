from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from services.ticket_api_service import TicketAPIService
from states.support_states import SupportStates
from keyboards import get_support_keyboard, get_main_menu_keyboard
from config import get_api_url
import logging

logger = logging.getLogger(__name__)

class SupportAPIHandlers:
    def __init__(self, api_base_url: str = None):
        self.router = Router()
        self.ticket_service = TicketAPIService(api_base_url)
        
        self.router.message.register(self.start_support, Command("support"))
        self.router.message.register(self.handle_support_message, StateFilter(SupportStates.waiting_for_support_message))
        self.router.message.register(self.handle_user_reply, F.reply_to_message)
        self.router.message.register(self.handle_support_attachment, F.content_type.in_({'photo', 'document'}))
    
    async def start_support(self, message: Message, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–µ—Ä–µ–∑ API"""
        user = message.from_user
        
        await message.answer(
            "üìû **–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏**\n\n"
            "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è:",
            reply_markup=get_support_keyboard(),
            parse_mode="Markdown"
        )
        await state.set_state(SupportStates.waiting_for_support_message)
    
    async def handle_support_message(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —á–µ—Ä–µ–∑ API"""
        user = message.from_user
        text = message.text or message.caption or "üìé –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º"
        
        if text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu_keyboard())
            await state.clear()
            return
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç —á–µ—Ä–µ–∑ API
            ticket_result = await self.ticket_service.create_ticket(
                user, text, str(message.chat.id), str(message.message_id)
            )
            
            ticket_id = ticket_result.get('id')
            await message.answer(
                f"‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ!\n"
                f"–ù–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞: `{ticket_id}`\n"
                f"–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                parse_mode="Markdown",
                reply_markup=get_main_menu_keyboard()
            )
            
            logger.info(f"–°–æ–∑–¥–∞–Ω —Ç–∏–∫–µ—Ç —á–µ—Ä–µ–∑ API: {ticket_id}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ —á–µ—Ä–µ–∑ API: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_menu_keyboard()
            )
        
        await state.clear()
    
    async def handle_user_reply(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —á–µ—Ä–µ–∑ API"""
        if message.reply_to_message and "–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏" in message.reply_to_message.text:
            user = message.from_user
            text = message.text
            
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å ticket_id –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —Å–≤—è–∑—å —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–∏–∫–µ—Ç–∞–º–∏
            ticket_id = await self._get_ticket_id_from_reply(message.reply_to_message)
            
            if ticket_id:
                try:
                    await self.ticket_service.add_message_to_ticket(
                        ticket_id, user, text,
                        str(message.chat.id), str(message.message_id)
                    )
                    await message.answer("‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ API: {e}")
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞")
    
    async def handle_support_attachment(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —á–µ—Ä–µ–∑ API"""
        user = message.from_user
        file_id = None
        attachments = []
        
        if message.photo:
            file_id = message.photo[-1].file_id
        elif message.document:
            file_id = message.document.file_id
        
        if file_id:
            attachments = [{"file_id": file_id}]
            text = message.caption or "üìé –§–∞–π–ª"
            
            try:
                ticket_result = await self.ticket_service.create_ticket(
                    user, text, str(message.chat.id), str(message.message_id)
                )
                
                await message.answer(
                    f"‚úÖ –¢–∏–∫–µ—Ç —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º —Å–æ–∑–¥–∞–Ω!\n"
                    f"–ù–æ–º–µ—Ä: `{ticket_result.get('id')}`",
                    parse_mode="Markdown",
                    reply_markup=get_main_menu_keyboard()
                )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.")
    
    async def _get_ticket_id_from_reply(self, reply_message) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–∏–∫–µ—Ç–∞ –∏–∑ reply —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        return None  # –ó–∞–≥–ª—É—à–∫–∞