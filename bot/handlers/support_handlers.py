from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext

from states.support_states import SupportStates
from services.ticket_service import TicketService
from keyboards import get_support_keyboard, get_ticket_actions_keyboard
from utils import format_ticket_info
import logging

logger = logging.getLogger(__name__)

class SupportHandlers:
    def __init__(self, ticket_service: TicketService, support_chat_id: str = None):
        self.router = Router()
        self.ticket_service = ticket_service
        self.support_chat_id = support_chat_id
        
        self.router.message.register(self.start_support, Command("support"))
        self.router.message.register(self.handle_support_message, StateFilter(SupportStates.waiting_for_support_message))
        self.router.message.register(self.handle_user_reply, F.reply_to_message)
        self.router.callback_query.register(self.handle_ticket_actions, F.data.startswith(("reply_", "close_")))
    
    async def start_support(self, message: Message, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
        user = message.from_user
        
        open_ticket = await self.ticket_service.get_open_ticket_by_user(user.id)
        
        if open_ticket:
            await message.answer(
                "üìû –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n"
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è:",
                reply_markup=get_support_keyboard()
            )
            await state.set_state(SupportStates.waiting_for_support_message)
            await state.update_data(ticket_id=str(open_ticket.id))
        else:
            await message.answer(
                "üìû **–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏**\n\n"
                "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è:",
                reply_markup=get_support_keyboard(),
                parse_mode="Markdown"
            )
            await state.set_state(SupportStates.waiting_for_support_message)
    
    async def handle_support_message(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        user = message.from_user
        text = message.text or message.caption or "üìé –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º"
        
        if text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu_keyboard())
            await state.clear()
            return
        
        data = await state.get_data()
        ticket_id = data.get('ticket_id')
        
        try:
            if ticket_id:
                ticket_msg = await self.ticket_service.add_message_to_ticket(
                    ticket_id, user, text, 
                    str(message.chat.id), str(message.message_id)
                )
                await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–∞—à —Ç–∏–∫–µ—Ç!")
            else:
                ticket = await self.ticket_service.create_ticket(
                    user, text, str(message.chat.id), str(message.message_id)
                )
                await state.update_data(ticket_id=str(ticket.id))
                await message.answer(
                    f"‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ!\n"
                    f"–ù–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞: `{ticket.id}`\n"
                    f"–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                    parse_mode="Markdown"
                )
            
            if self.support_chat_id:
                await self._forward_to_support(message, ticket_id or str(ticket.id))
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        await state.clear()
    
    async def handle_user_reply(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        if message.reply_to_message and "–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏" in message.reply_to_message.text:
            user = message.from_user
            text = message.text
            
            open_ticket = await self.ticket_service.get_open_ticket_by_user(user.id)
            
            if open_ticket:
                await self.ticket_service.add_message_to_ticket(
                    str(open_ticket.id), user, text,
                    str(message.chat.id), str(message.message_id)
                )
                await message.answer("‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!")
    
    async def handle_ticket_actions(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–∏–∫–µ—Ç–æ–º"""
        data = callback.data
        ticket_id = data.split('_')[1]
        
        if data.startswith('close_'):
            ticket = await self.ticket_service.close_ticket(ticket_id)
            await callback.message.edit_text(f"‚úÖ –¢–∏–∫–µ—Ç {ticket_id} –∑–∞–∫—Ä—ã—Ç")
        elif data.startswith('reply_'):
            await state.set_state(SupportStates.waiting_for_support_reply)
            await state.update_data(ticket_id=ticket_id)
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:")
        
        await callback.answer()
    
    async def _forward_to_support(self, message: Message, ticket_id: str):
        """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
        pass