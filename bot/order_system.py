import logging
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
import random

logger = logging.getLogger(__name__)

router = Router()

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ - –ë–î)
user_carts = {}
user_orders = {}

class OrderStates(StatesGroup):
    waiting_for_phone = State()
    waiting_for_address = State()
    choosing_delivery = State()
    waiting_for_promo = State()

# 4. –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
async def notify_user_about_order_status(bot: Bot, order_data: dict):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞"""
    user_id = order_data['user_id']
    
    status_messages = {
        "–ù–æ–≤—ã–π": "üÜï –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É",
        "–í —Ä–∞–±–æ—Ç–µ": "üë®‚Äçüç≥ –í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è", 
        "–ì–æ—Ç–æ–≤": "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ",
        "–í –ø—É—Ç–∏": "üöó –í–∞—à –∑–∞–∫–∞–∑ –≤ –ø—É—Ç–∏ –∫ –≤–∞–º",
        "–î–æ—Å—Ç–∞–≤–ª–µ–Ω": "üéâ –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
        "–û—Ç–º–µ–Ω–µ–Ω": "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω"
    }
    
    message = status_messages.get(order_data['status'], "‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω")
    
    notification_text = (
        f"{message}\n\n"
        f"üé´ –ó–∞–∫–∞–∑: #{order_data['id']}\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {order_data['status']}\n"
        f"üíµ –°—É–º–º–∞: {order_data['total']}‚ÇΩ\n"
    )
    
    if order_data['status'] == "–ì–æ—Ç–æ–≤" and order_data['delivery_type'] == "–°–∞–º–æ–≤—ã–≤–æ–∑":
        notification_text += "\nüè™ –ú–æ–∂–µ—Ç–µ –∑–∞–±–∏—Ä–∞—Ç—å –∑–∞–∫–∞–∑ –ø–æ –∞–¥—Ä–µ—Å—É:\n–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –í–µ–ª–æ—Å–∏–ø–µ–¥–Ω–∞—è, 1\n\n‚è∞ –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: 10:00-20:00"
    
    elif order_data['status'] == "–í –ø—É—Ç–∏":
        notification_text += f"\nüöó –ö—É—Ä—å–µ—Ä —É–∂–µ –≤ –ø—É—Ç–∏!\nüìû –¢–µ–ª–µ—Ñ–æ–Ω –∫—É—Ä—å–µ—Ä–∞: +7 (999) 765-43-21"
    
    keyboard = [
        [InlineKeyboardButton(text="üì¶ –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∑–∞–∫–∞–∑–µ", callback_data=f"order_status_{order_data['id']}")],
        [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", callback_data="support")]
    ]
    
    try:
        await bot.send_message(
            chat_id=user_id,
            text=notification_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ –∑–∞–∫–∞–∑–µ {order_data['id']}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

async def notify_user_about_promotion(bot: Bot, user_id: int, promotion_data: dict):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∞–∫—Ü–∏—è—Ö –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö"""
    promotion_text = (
        f"üéÅ **–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!**\n\n"
        f"{promotion_data['title']}\n\n"
        f"{promotion_data['description']}\n\n"
        f"‚è∞ {promotion_data['duration']}"
    )
    
    keyboard = [
        [InlineKeyboardButton(text="üõí –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data="catalog")],
        [InlineKeyboardButton(text="üéÅ –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –∞–∫—Ü–∏–∏", callback_data=f"promo_{promotion_data['id']}")]
    ]
    
    try:
        await bot.send_message(
            chat_id=user_id,
            text=promotion_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–º–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)
async def simulate_order_progress(bot: Bot, order_id: str):
    """–°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    if order_id not in user_orders:
        return
    
    order = user_orders[order_id]
    status_flow = ["–ù–æ–≤—ã–π", "–í —Ä–∞–±–æ—Ç–µ", "–ì–æ—Ç–æ–≤", "–í –ø—É—Ç–∏", "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"]
    
    current_index = status_flow.index(order['status']) if order['status'] in status_flow else 0
    
    if current_index < len(status_flow) - 1:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        new_status = status_flow[current_index + 1]
        user_orders[order_id]['status'] = new_status
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await notify_user_about_order_status(bot, user_orders[order_id])
        
        logger.info(f"üîÑ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_status}")

# 5. –°–ò–°–¢–ï–ú–ê –ê–ö–¶–ò–ô –ò –ü–†–û–ú–û–ö–û–î–û–í (–æ—Å—Ç–∞–≤–ª—è–µ–º, —ç—Ç–æ –ø–æ–ª–µ–∑–Ω–æ)
@router.callback_query(F.data == "promo")
async def enter_promo(callback: CallbackQuery, state: FSMContext):
    """–í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    await callback.message.edit_text(
        "üéÅ **–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:**\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:\n"
        "‚Ä¢ WELCOME10 - 10% —Å–∫–∏–¥–∫–∞\n"
        "‚Ä¢ BIKE2024 - 15% –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã\n"
        "‚Ä¢ FREEDELIVERY - –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cart")]
        ])
    )
    await state.set_state(OrderStates.waiting_for_promo)

@router.message(OrderStates.waiting_for_promo)
async def apply_promo(message: Message, state: FSMContext):
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    promo = message.text.upper().strip()
    promocodes = {
        "WELCOME10": {"discount": 10, "type": "percent", "message": "üéâ 10% —Å–∫–∏–¥–∫–∞ –Ω–∞ –≤–µ—Å—å –∑–∞–∫–∞–∑!"},
        "BIKE2024": {"discount": 15, "type": "percent", "message": "üö¥ 15% —Å–∫–∏–¥–∫–∞ –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã!"},
        "FREEDELIVERY": {"discount": 0, "type": "free_delivery", "message": "üöó –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!"}
    }
    
    if promo in promocodes:
        promo_data = promocodes[promo]
        await state.update_data(promo=promo, promo_data=promo_data)
        await message.answer(f"‚úÖ {promo_data['message']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
        await message.answer("üõí –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏")
        
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    
    await state.clear()

# 6. –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –û –ê–ö–¶–ò–Ø–• (–≤–º–µ—Å—Ç–æ –æ—Ç–∑—ã–≤–æ–≤)
@router.callback_query(F.data == "subscribe_promo")
async def subscribe_to_promotions(callback: CallbackQuery):
    """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∞–∫—Ü–∏–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await callback.message.edit_text(
        "üîî **–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!**\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–≤—ã–º–∏ —É–∑–Ω–∞–≤–∞—Ç—å –æ:\n"
        "‚Ä¢ üéÅ –°–∫–∏–¥–∫–∞—Ö –∏ –∞–∫—Ü–∏—è—Ö\n"
        "‚Ä¢ üö¥ –ù–æ–≤—ã—Ö –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è—Ö\n"
        "‚Ä¢ ‚ö° –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö\n\n"
        "–ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –Ω–∏—á–µ–≥–æ –≤–∞–∂–Ω–æ–≥–æ!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
            [InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )

@router.callback_query(F.data.startswith("promo_"))
async def show_promotion_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∞–∫—Ü–∏–∏"""
    promo_id = callback.data.split('_')[1]
    
    promotions = {
        "bike2024": {
            "title": "üö¥ –°–ö–ò–î–ö–ê 15% –ù–ê –í–ï–õ–û–°–ò–ü–ï–î–´",
            "description": "–¢–æ–ª—å–∫–æ –≤ —è–Ω–≤–∞—Ä–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≤—Å–µ –º–æ–¥–µ–ª–∏ –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤!",
            "duration": "–ê–∫—Ü–∏—è –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ 31.01.2024"
        },
        "welcome": {
            "title": "üéÅ 10% –°–ö–ò–î–ö–ê –î–õ–Ø –ù–û–í–´–• –ö–õ–ò–ï–ù–¢–û–í",
            "description": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑!",
            "duration": "–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∞–∫—Ü–∏—è"
        }
    }
    
    promo = promotions.get(promo_id, {
        "title": "üéÅ –ê–∫—Ü–∏—è",
        "description": "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
        "duration": "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"
    })
    
    await callback.message.edit_text(
        f"{promo['title']}\n\n"
        f"{promo['description']}\n\n"
        f"‚è∞ {promo['duration']}\n\n"
        f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
            [InlineKeyboardButton(text="üéÅ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="promo")],
            [InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )

# 7. –°–ò–°–¢–ï–ú–ê –î–û–°–¢–ê–í–ö–ò –ò –°–ê–ú–û–í–´–í–û–ó–ê (–æ—Å—Ç–∞–≤–ª—è–µ–º, —ç—Ç–æ –≤–∞–∂–Ω–æ)
@router.callback_query(F.data == "checkout")
async def choose_delivery(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    user_id = callback.from_user.id
    cart = user_carts.get(user_id, {})
    
    if not cart:
        await callback.message.edit_text(
            "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üõí –ö –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog")],
                [InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        return
    
    keyboard = [
        [InlineKeyboardButton(text="üöó –î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º (+300‚ÇΩ)", callback_data="delivery_courier")],
        [InlineKeyboardButton(text="üè™ –°–∞–º–æ–≤—ã–≤–æ–∑ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)", callback_data="delivery_pickup")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cart")]
    ]
    
    await callback.message.edit_text(
        "üöö **–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è**\n\n"
        "‚Ä¢ üöó –î–æ—Å—Ç–∞–≤–∫–∞ - 300‚ÇΩ (2-3 —á–∞—Å–∞)\n"
        "‚Ä¢ üè™ –°–∞–º–æ–≤—ã–≤–æ–∑ - –±–µ—Å–ø–ª–∞—Ç–Ω–æ (–≥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ 1 —á–∞—Å)\n\n"
        "üìç –ê–¥—Ä–µ—Å –º–∞–≥–∞–∑–∏–Ω–∞: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –í–µ–ª–æ—Å–∏–ø–µ–¥–Ω–∞—è, 1",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(OrderStates.choosing_delivery)

@router.callback_query(F.data.startswith("delivery_"))
async def handle_delivery_choice(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    delivery_type = callback.data.split('_')[1]
    
    delivery_info = {
        "courier": {"name": "–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º", "price": 300},
        "pickup": {"name": "–°–∞–º–æ–≤—ã–≤–æ–∑", "price": 0}
    }
    
    delivery_data = delivery_info.get(delivery_type, {"name": "–ù–µ —É–∫–∞–∑–∞–Ω–æ", "price": 0})
    await state.update_data(delivery_type=delivery_data['name'], delivery_price=delivery_data['price'])
    
    await callback.message.edit_text(
        "üìû **–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:**",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cart")]
        ])
    )
    await state.set_state(OrderStates.waiting_for_phone)

# –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–§–û–†–ú–õ–ï–ù–ò–Ø –ó–ê–ö–ê–ó–ê –° –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø–ú–ò
@router.message(OrderStates.waiting_for_phone)
async def handle_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    await state.update_data(phone=message.text)
    
    data = await state.get_data()
    delivery_type = data.get('delivery_type', '')
    
    if delivery_type == "–°–∞–º–æ–≤—ã–≤–æ–∑":
        # –î–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ –Ω–µ –Ω—É–∂–µ–Ω –∞–¥—Ä–µ—Å
        await complete_order(message, state)
    else:
        # –î–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å
        await message.answer(
            "üìç **–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:**\n\n"
            "–£–∫–∞–∂–∏—Ç–µ —É–ª–∏—Ü—É, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä—É:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cart")]
            ])
        )
        await state.set_state(OrderStates.waiting_for_address)

@router.message(OrderStates.waiting_for_address)
async def handle_address(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    await state.update_data(address=message.text)
    await complete_order(message, state, bot)

async def complete_order(message: Message, state: FSMContext, bot: Bot = None):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    user_id = message.from_user.id
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    order_id = f"{random.randint(1000, 9999)}"
    order_data = {
        "id": order_id,
        "user_id": user_id,
        "user_name": message.from_user.first_name,
        "phone": data['phone'],
        "address": data.get('address', '–°–∞–º–æ–≤—ã–≤–æ–∑'),
        "delivery_type": data.get('delivery_type', '–°–∞–º–æ–≤—ã–≤–æ–∑'),
        "delivery_price": data.get('delivery_price', 0),
        "status": "–ù–æ–≤—ã–π",
        "created_at": datetime.now().strftime("%d.%m.%Y %H:%M"),
        "items": [],
        "total": 0
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã
    products = {
        1: {"name": "–ì–æ—Ä–Ω—ã–π –≤–µ–ª–æ—Å–∏–ø–µ–¥ X1", "price": 25000},
        2: {"name": "–ì–æ—Ä–æ–¥—Å–∫–æ–π –≤–µ–ª–æ—Å–∏–ø–µ–¥", "price": 18000},
    }
    
    cart = user_carts.get(user_id, {})
    items_total = 0
    
    for product_id, quantity in cart.items():
        product = products.get(product_id, {"name": f"–¢–æ–≤–∞—Ä #{product_id}", "price": 0})
        item_total = product['price'] * quantity
        items_total += item_total
        
        order_data['items'].append({
            "name": product['name'],
            "price": product['price'],
            "quantity": quantity,
            "total": item_total
        })
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –µ—Å–ª–∏ –µ—Å—Ç—å
    promo_data = data.get('promo_data', {})
    if promo_data:
        if promo_data['type'] == 'percent':
            discount = items_total * promo_data['discount'] / 100
            items_total -= discount
        elif promo_data['type'] == 'free_delivery':
            order_data['delivery_price'] = 0
    
    order_data['total'] = items_total + order_data['delivery_price']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
    user_orders[order_id] = order_data
    
    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    user_carts[user_id] = {}
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if bot:
        await notify_user_about_order_status(bot, order_data)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    confirmation_text = (
        f"‚úÖ **–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!**\n\n"
        f"üé´ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{order_id}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üöö –°–ø–æ—Å–æ–±: {order_data['delivery_type']}\n"
    )
    
    if order_data['delivery_type'] != '–°–∞–º–æ–≤—ã–≤–æ–∑':
        confirmation_text += f"üìç –ê–¥—Ä–µ—Å: {data['address']}\n"
    else:
        confirmation_text += "üìç –°–∞–º–æ–≤—ã–≤–æ–∑: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –í–µ–ª–æ—Å–∏–ø–µ–¥–Ω–∞—è, 1\n"
    
    confirmation_text += (
        f"üíµ –°—É–º–º–∞: {order_data['total']}‚ÇΩ\n\n"
        f"‚è∞ {order_data['delivery_type']} - –≥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ 1-2 —á–∞—Å–∞\n"
        f"üí≥ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏\n\n"
        f"üìû –î–ª—è —Å–≤—è–∑–∏: +7 (999) 123-45-67\n\n"
        f"üîî –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞!"
    )
    
    keyboard = [
        [InlineKeyboardButton(text="üì¶ –û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"order_status_{order_id}")],
        [InlineKeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–∫—Ü–∏–∏", callback_data="subscribe_promo")],
        [InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await message.answer(confirmation_text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
    await state.clear()

# –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –°–¢–ê–¢–£–°–ê –ó–ê–ö–ê–ó–ê
@router.callback_query(F.data.startswith("order_status_"))
async def check_order_status(callback: CallbackQuery, bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–∏–º—É–ª—è—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    order_id = callback.data.split('_')[2]
    
    if order_id not in user_orders:
        await callback.message.edit_text(
            "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="orders")],
                [InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        return
    
    order = user_orders[order_id]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    keyboard = []
    
    # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å" –¥–ª—è –¥–µ–º–æ
    if order['status'] != "–î–æ—Å—Ç–∞–≤–ª–µ–Ω":
        keyboard.append([InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å (–¥–µ–º–æ)", callback_data=f"simulate_progress_{order_id}")])
    
    keyboard.extend([
        [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", callback_data="support")],
        [InlineKeyboardButton(text="üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="orders")],
        [InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    status_info = {
        "–ù–æ–≤—ã–π": "üÜï –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É",
        "–í —Ä–∞–±–æ—Ç–µ": "üë®‚Äçüç≥ –í–∞—à –∑–∞–∫–∞–∑ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è",
        "–ì–æ—Ç–æ–≤": "‚úÖ –ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ/–æ—Ç–ø—Ä–∞–≤–∫–µ", 
        "–í –ø—É—Ç–∏": "üöó –ö—É—Ä—å–µ—Ä –≤ –ø—É—Ç–∏ –∫ –≤–∞–º",
        "–î–æ—Å—Ç–∞–≤–ª–µ–Ω": "üéâ –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ!"
    }
    
    status_description = status_info.get(order['status'], "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ")
    
    order_text = (
        f"üì¶ **–ó–∞–∫–∞–∑ #{order_id}**\n\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {order['status']}\n"
        f"{status_description}\n\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω: {order['created_at']}\n"
        f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {order['delivery_type']}\n"
        f"üíµ –°—É–º–º–∞: {order['total']}‚ÇΩ\n"
    )
    
    if order['delivery_type'] == '–°–∞–º–æ–≤—ã–≤–æ–∑' and order['status'] in ['–ì–æ—Ç–æ–≤', '–í –ø—É—Ç–∏', '–î–æ—Å—Ç–∞–≤–ª–µ–Ω']:
        order_text += "\nüè™ –ê–¥—Ä–µ—Å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞:\n–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –í–µ–ª–æ—Å–∏–ø–µ–¥–Ω–∞—è, 1\n‚è∞ 10:00-20:00"
    
    await callback.message.edit_text(order_text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))

# –î–ï–ú–û-–§–£–ù–ö–¶–ò–Ø –î–õ–Ø –°–ò–ú–£–õ–Ø–¶–ò–ò –ü–†–û–ì–†–ï–°–°–ê
@router.callback_query(F.data.startswith("simulate_progress_"))
async def simulate_order_progress_demo(callback: CallbackQuery, bot: Bot):
    """–î–µ–º–æ-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–∫–∞–∑–∞"""
    order_id = callback.data.split('_')[2]
    
    if order_id in user_orders:
        await simulate_order_progress(bot, order_id)
        await check_order_status(callback, bot)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    else:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")