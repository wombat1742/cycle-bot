import logging
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import Dict, List

from config import config
from api_ticket_service import APITicketService  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API —Å–µ—Ä–≤–∏—Å–∞ ‚úÖ –î–û–ë–ê–í–¨ –≠–¢–û
ticket_service = APITicketService(
    api_base_url=config.API_URL,
    api_token=config.API_TOKEN
)

# –†–æ—É—Ç–µ—Ä
router = Router()

# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤/–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
SUPPORT_IDS = config.ADMIN_IDS
ADMIN_CHAT_ID = config.HELP_CHAT_ID

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class SupportStates(StatesGroup):
    awaiting_support_message = State()
    replying_to_user = State()

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ—Å—Ç–æ–≤
TESTS = [
    {
        "id": 1,
        "name": "bike_type_selection",
        "title": "üö¥ –ü–æ–¥–±–æ—Ä –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞",
        "questions": [
            {
                "id": 1,
                "text": "–î–ª—è –∫–∞–∫–∏—Ö —Ü–µ–ª–µ–π –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ–ª–æ—Å–∏–ø–µ–¥?",
                "answers": [
                    {"id": 1, "key": "city", "value": 1, "text": "üèôÔ∏è –ì–æ—Ä–æ–¥—Å–∫–∏–µ –ø–æ–µ–∑–¥–∫–∏"},
                    {"id": 2, "key": "sport", "value": 2, "text": "üèÅ –°–ø–æ—Ä—Ç –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"},
                    {"id": 3, "key": "tourism", "value": 3, "text": "üó∫Ô∏è –¢—É—Ä–∏–∑–º –∏ –ø–æ—Ö–æ–¥—ã"},
                    {"id": 4, "key": "offroad", "value": 4, "text": "üèîÔ∏è –ë–µ–∑–¥–æ—Ä–æ–∂—å–µ –∏ –≥–æ—Ä—ã"}
                ]
            },
            {
                "id": 2,
                "text": "–ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏?",
                "answers": [
                    {"id": 5, "key": "beginner", "value": 1, "text": "üü¢ –ù–∞—á–∏–Ω–∞—é—â–∏–π"},
                    {"id": 6, "key": "intermediate", "value": 2, "text": "üü° –ü—Ä–æ–¥–æ–ª–∂–∞—é—â–∏–π"},
                    {"id": 7, "key": "pro", "value": 3, "text": "üî¥ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª"}
                ]
            },
            {
                "id": 3,
                "text": "–ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ?",
                "answers": [
                    {"id": 8, "key": "budget", "value": 1, "text": "üí∞ –î–æ 20,000‚ÇΩ"},
                    {"id": 9, "key": "medium", "value": 2, "text": "üíµ 20,000-50,000‚ÇΩ"},
                    {"id": 10, "key": "premium", "value": 3, "text": "üíé –°–≤—ã—à–µ 50,000‚ÇΩ"}
                ]
            }
        ]
    }
]

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
user_progress = {}
user_support_messages = {}

@router.message(Command("start"))
async def start(message: Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [
            InlineKeyboardButton(text="üö¥ –ü–æ–¥–±–æ—Ä –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞", callback_data="test_1"),
            InlineKeyboardButton(text="üõí –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")
        ],
        [
            InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", callback_data="support"),
            InlineKeyboardButton(text="‚ÑπÔ∏è –û –º–∞–≥–∞–∑–∏–Ω–µ", callback_data="about")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await message.answer(
        f"üö¥‚Äç‚ôÇÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {config.SHOP_NAME}!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=reply_markup
    )

@router.callback_query(F.data == "about")
async def handle_about(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ"""
    about_text = (
        f"üè™ **{config.SHOP_NAME}**\n\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {config.SHOP_PHONE}\n"
        f"üìç –ê–¥—Ä–µ—Å: {config.SHOP_ADDRESS}\n\n"
        "üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:\n"
        "–ü–Ω-–ü—Ç: 9:00-21:00\n"
        "–°–±-–í—Å: 10:00-20:00"
    )
    
    keyboard = [
        [InlineKeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
        [InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await callback.message.edit_text(
        about_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()

@router.callback_query(F.data == "support")
async def handle_support_request(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    keyboard = [
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_support")]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(
        "üìû **–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏**\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è:\n\n"
        "üí¨ _–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..._",
        reply_markup=reply_markup
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    await state.set_state(SupportStates.awaiting_support_message)
    await callback.answer()

@router.message(SupportStates.awaiting_support_message)
async def forward_to_support(message: Message, state: FSMContext, bot: Bot):
    """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É (–∞–Ω–æ–Ω–∏–º–Ω–æ)"""
    user = message.from_user
    message_text = message.text
    
    # üî• –î–û–ë–ê–í–õ–Ø–ï–ú –í–´–ó–û–í API –°–ï–†–í–ò–°–ê - –≠–¢–û–ì–û –ù–ï–¢ –í –¢–í–û–ï–ú –ö–û–î–ï!
    try:
        logger.info("üîÑ –°–û–•–†–ê–ù–ï–ù–ò–ï –¢–ò–ö–ï–¢–ê –í API...")
        from api_ticket_service import ticket_service  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–∫–µ—Ç –≤ API
        api_result = await ticket_service.create_ticket(
            tg_user=user,
            message_text=message_text,
            chat_id=str(message.chat.id),
            msg_id=str(message.message_id)
        )
        
        ticket_id = api_result.get("ticket_id", "unknown")
        logger.info(f"‚úÖ –¢–∏–∫–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ API: {ticket_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ API: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
        ticket_id = "not_saved"
    
    # ‚ö†Ô∏è –î–ê–õ–¨–®–ï –¢–í–û–ô –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –ö–û–î, –ù–û –î–û–ë–ê–í–õ–Ø–ï–ú ticket_id
    support_message = (
        f"üÜï –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n"
        f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message_text}\n"
        f"üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.id}\n"
        f"üë§ –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"üé´ ID —Ç–∏–∫–µ—Ç–∞: {ticket_id}\n"  # üî• –î–û–ë–ê–í–ò–õ–ò ticket_id
        f"üìÖ –í—Ä–µ–º—è: {message.date.strftime('%Y-%m-%d %H:%M')}"
    )
    
    reply_keyboard = [
        [InlineKeyboardButton(text="üìù –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user.id}")],
        [InlineKeyboardButton(text="‚úÖ –†–µ—à–µ–Ω–æ", callback_data=f"resolve_{user.id}")]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=reply_keyboard)
    
    try:
        sent_message = await bot.send_message(
            chat_id=config.SUPPORT_ID,
            text=support_message,
            reply_markup=reply_markup
        )
        
        # üî• –û–ë–ù–û–í–õ–Ø–ï–ú –°–û–•–†–ê–ù–ï–ù–ò–ï –° ticket_id
        if user.id not in user_support_messages:
            user_support_messages[user.id] = []
        
        user_support_messages[user.id].append({
            'user_message_id': message.message_id,
            'support_message_id': sent_message.message_id,
            'SUPPORT_ID': config.SUPPORT_ID,
            'user_name': user.first_name,
            'ticket_id': ticket_id  # üî• –°–û–•–†–ê–ù–Ø–ï–ú ID –¢–ò–ö–ï–¢–ê
        })
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ {config.SUPPORT_ID}: {e}")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    keyboard = [
        [InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await message.answer(
        "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!\n"
        "–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
        "üïê –û–±—ã—á–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 5-15 –º–∏–Ω—É—Ç.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@router.callback_query(F.data.startswith("reply_"))
async def handle_support_reply(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    user_id = int(callback.data.split('_')[1])
    
    user_name = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    if user_id in user_support_messages and user_support_messages[user_id]:
        user_name = user_support_messages[user_id][0].get('user_name', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
    
    await callback.message.edit_text(
        f"üí¨ –û—Ç–≤–µ—Ç {user_name} (ID: {user_id}):\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    await state.set_state(SupportStates.replying_to_user)
    await state.update_data(user_id=user_id, support_message_id=callback.message.message_id)
    await callback.answer()

@router.callback_query(F.data.startswith("resolve_"))
async def handle_resolve_support(callback: CallbackQuery):
    """–ü–æ–º–µ—Ç–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω–æ–µ"""
    user_id = int(callback.data.split('_')[1])
    
    await callback.message.edit_text(
        f"‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ {user_id} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω–æ–µ"
    )
    await callback.answer()

@router.message(SupportStates.replying_to_user)
async def handle_support_message(message: Message, state: FSMContext, bot: Bot, config=config):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    data = await state.get_data()
    user_id = data.get('user_id')
    support_message_text = message.text
    
    try:
        # üî• –î–û–ë–ê–í–õ–Ø–ï–ú –°–û–•–†–ê–ù–ï–ù–ò–ï –û–¢–í–ï–¢–ê –í API
        ticket_id = None
        if user_id in user_support_messages and user_support_messages[user_id]:
            ticket_id = user_support_messages[user_id][0].get('ticket_id')
        
        if ticket_id and ticket_id != "not_saved":
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤ API –¥–ª—è —Ç–∏–∫–µ—Ç–∞ {ticket_id}")
            from api_ticket_service import ticket_service
            
            await ticket_service.add_message(
                ticket_id=ticket_id,
                tg_user=message.from_user,  # –ø–æ–¥–¥–µ—Ä–∂–∫–∞
                message_text=support_message_text,
                chat_id=str(message.chat.id),
                msg_id=str(message.message_id),
                is_staff=True  # üî• –í–∞–∂–Ω–æ - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏!
            )
            logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ API")
        
        # –î–ê–õ–¨–®–ï –¢–í–û–ô –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –ö–û–î...
        user_chat_id = user_support_messages.get(user_id, [{}])[0].get('SUPPORT_ID')
        if user_chat_id:
            await bot.send_message(
                chat_id=user_chat_id,
                text=f"üí¨ **–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:**\n\n{support_message_text}\n\n"
                     f"_–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ_"
            )
            await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
    
    await state.clear()

@router.message(F.reply_to_message)
async def forward_user_reply_to_support(message: Message, bot: Bot):
    """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    user = message.from_user
    message_text = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    reply_text = message.reply_to_message.text
    if "–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏" in reply_text:
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        support_message = (
            f"üîÑ –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.first_name} (ID: {user.id})\n\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message_text}\n"
            f"üìÖ –í—Ä–µ–º—è: {message.date.strftime('%H:%M')}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∞–º
        for support_id in SUPPORT_IDS:
            try:
                keyboard = [
                    [InlineKeyboardButton(text="üìù –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user.id}")],
                    [InlineKeyboardButton(text="‚úÖ –†–µ—à–µ–Ω–æ", callback_data=f"resolve_{user.id}")]
                ]
                
                await bot.send_message(
                    chat_id=support_id,
                    text=support_message,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ {support_id}: {e}")
        
        await message.answer("‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!")

@router.callback_query(F.data == "cancel_support")
async def handle_cancel_support(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    await state.clear()
    await start(callback.message)
    await callback.answer()

@router.callback_query(F.data == "main_menu")
async def handle_main_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await start(callback.message)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ—Å—Ç–æ–≤ –∏ –∫–∞—Ç–∞–ª–æ–≥–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
@router.callback_query(F.data.startswith("test_"))
async def handle_test_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–∞"""
    test_id = int(callback.data.split('_')[1])
    user_id = callback.from_user.id
    
    test = next((t for t in TESTS if t['id'] == test_id), None)
    if not test:
        await callback.message.edit_text("–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user_progress[user_id] = {
        'test_id': test_id,
        'current_question': 0,
        'answers': {},
        'test_data': test
    }
    
    await show_question(callback)
    await callback.answer()

async def show_question(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –≤–æ–ø—Ä–æ—Å–∞ —Ç–µ—Å—Ç–∞"""
    user_id = callback.from_user.id
    
    if user_id not in user_progress:
        await callback.message.edit_text("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞")
        return
    
    progress = user_progress[user_id]
    test = progress['test_data']
    current_q_index = progress['current_question']
    
    if current_q_index >= len(test['questions']):
        await finish_test(callback)
        return
    
    question = test['questions'][current_q_index]
    
    keyboard = []
    for answer in question['answers']:
        keyboard.append([InlineKeyboardButton(text=answer['text'], callback_data=f"answer_{answer['id']}")])
    
    if current_q_index > 0:
        keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_test")])
    
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    progress_text = f"üìä –í–æ–ø—Ä–æ—Å {current_q_index + 1}/{len(test['questions'])}"
    
    await callback.message.edit_text(
        f"{progress_text}\n\n{question['text']}",
        reply_markup=reply_markup
    )

@router.callback_query(F.data.startswith("answer_"))
async def handle_answer(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞"""
    user_id = callback.from_user.id
    
    if callback.data == "back":
        progress = user_progress[user_id]
        if progress['current_question'] > 0:
            progress['current_question'] -= 1
        await show_question(callback)
        return
    
    if callback.data == "cancel_test":
        if user_id in user_progress:
            del user_progress[user_id]
        await callback.message.edit_text("–¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω")
        await start(callback.message)
        return
    
    answer_id = int(callback.data.split('_')[1])
    
    progress = user_progress[user_id]
    test = progress['test_data']
    current_question = test['questions'][progress['current_question']]
    
    selected_answer = next((a for a in current_question['answers'] if a['id'] == answer_id), None)
    if not selected_answer:
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    progress['answers'][current_question['id']] = selected_answer['id']
    progress['current_question'] += 1
    
    await show_question(callback)
    await callback.answer()

async def finish_test(callback: CallbackQuery):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
    user_id = callback.from_user.id
    
    if user_id not in user_progress:
        await callback.message.edit_text("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞")
        return
    
    progress = user_progress[user_id]
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Å—Ç–∞
    recommendations = "üö≤ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º:\n‚Ä¢ –ì–æ—Ä–æ–¥—Å–∫–æ–π –≤–µ–ª–æ—Å–∏–ø–µ–¥ - 25,000‚ÇΩ\n‚Ä¢ –ì–æ—Ä–Ω—ã–π –≤–µ–ª–æ—Å–∏–ø–µ–¥ - 35,000‚ÇΩ"
    
    keyboard = [
        [InlineKeyboardButton(text="üõí –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–∞–º", callback_data="catalog")],
        [InlineKeyboardButton(text="üìû –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="support")],
        [InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await callback.message.edit_text(
        f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n{recommendations}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    
    del user_progress[user_id]

@router.callback_query(F.data == "catalog")
async def handle_catalog(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    keyboard = [
        [InlineKeyboardButton(text="üì¶ –°–∫–ª–∞–¥–Ω—ã–µ", callback_data="cat_folding")],
        [InlineKeyboardButton(text="üèîÔ∏è –ì–æ—Ä–Ω—ã–µ", callback_data="cat_mountain")],
        [InlineKeyboardButton(text="üö¥ –ì–∏–±—Ä–∏–¥–Ω—ã–µ", callback_data="cat_hybrid")],
        [InlineKeyboardButton(text="üìû –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="support")],
        [InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await callback.message.edit_text(
        "üõí **–ö–∞—Ç–∞–ª–æ–≥ –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    bot = Bot(token=config.BOT_TOKEN)
    dp = Dispatcher()
    dp.include_router(router)
    
    print(f"ü§ñ –ë–æ—Ç {config.SHOP_NAME} –∑–∞–ø—É—â–µ–Ω!")
    print(f"üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {len(SUPPORT_IDS)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
    print("üö¥ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–∞–∂–∏ –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤ –∞–∫—Ç–∏–≤–Ω–∞")
    
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())