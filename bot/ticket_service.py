import aiohttp
import logging
from uuid import uuid4
from datetime import datetime
from typing import List, Optional, Dict, Any
from aiogram.types import User as TgUser
import json
import ssl

logger = logging.getLogger(__name__)

class APITicketService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∏–∫–µ—Ç–∞–º–∏ —á–µ—Ä–µ–∑ REST API
    –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä—è–º—É—é —Ä–∞–±–æ—Ç—É —Å –ë–î, —Ç–æ–ª—å–∫–æ HTTP –∑–∞–ø—Ä–æ—Å—ã
    """
    
    def __init__(self, api_base_url: str, api_token: str):
        self.api_base_url = api_base_url.rstrip('/')
        self.api_token = api_token
        self.timeout = aiohttp.ClientTimeout(total=30)
        
        logger.info(f"üöÄ APITicketService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"üåê API Base URL: {self.api_base_url}")
        logger.info(f"üîë API Token: {self.api_token[:10]}...")
    
    async def _send_api_request(self, method: str, endpoint: str, data: Dict[str, Any] = None) -> Dict[str, Any]:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
        """
        url = f"{self.api_base_url}/{endpoint.lstrip('/')}"
        
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ {method} –∑–∞–ø—Ä–æ—Å–∞ –∫: {url}")
        
        if data:
            logger.debug(f"üì¶ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {json.dumps(data, indent=2, ensure_ascii=False)}")
        
        headers = {
            "Authorization": self.api_token,
            "Content-Type": "application/json",
            "User-Agent": "BikeShopBot/1.0"
        }
        
        # SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏
        ssl_context = ssl.create_default_context()
        ssl_context.check_hostname = False
        ssl_context.verify_mode = ssl.CERT_NONE
        
        try:
            connector = aiohttp.TCPConnector(ssl=ssl_context)
            
            async with aiohttp.ClientSession(
                connector=connector,
                timeout=self.timeout,
                headers=headers
            ) as session:
                
                request_kwargs = {}
                if data and method.upper() in ['POST', 'PUT', 'PATCH']:
                    request_kwargs['json'] = data
                
                async with session.request(method.upper(), url, **request_kwargs) as response:
                    return await self._process_api_response(response, url)
                    
        except aiohttp.ClientConnectorError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {url}: {e}")
            raise ConnectionError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API: {e}")
        except aiohttp.ServerTimeoutError as e:
            logger.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ {url}: {e}")
            raise TimeoutError(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è API: {e}")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url}: {e}")
            raise
    
    async def _process_api_response(self, response: aiohttp.ClientResponse, url: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API
        """
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç {url}, —Å—Ç–∞—Ç—É—Å: {response.status}")
        
        response_text = await response.text()
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if response_text:
            logger.debug(f"üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response_text[:500]}...")
        else:
            logger.debug("üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: –ø—É—Å—Ç–æ–µ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥
        if response.status >= 400:
            error_msg = f"API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É {response.status} –¥–ª—è {url}"
            logger.error(f"‚ùå {error_msg}")
            logger.error(f"   –û—Ç–≤–µ—Ç: {response_text}")
            raise aiohttp.ClientResponseError(
                request_info=response.request_info,
                history=response.history,
                status=response.status,
                message=error_msg,
                headers=response.headers
            )
        
        # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
        if response_text.strip():
            try:
                result = await response.json()
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API")
                return result
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç {url}: {e}")
                logger.error(f"   –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {response_text}")
                raise ValueError(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ –æ—Ç–≤–µ—Ç–µ API: {e}")
        else:
            logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
            return {}
    
    async def health_check(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
        """
        logger.info("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API...")
        
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∏–∫–µ—Ç - –µ—Å–ª–∏ API –æ—Ç–≤–µ—á–∞–µ—Ç, –∑–Ω–∞—á–∏—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
            await self._send_api_request("GET", f"ticket/health-check-test-{uuid4()}")
            return True
        except aiohttp.ClientResponseError as e:
            if e.status == 404:
                logger.info("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω (–ø–æ–ª—É—á–µ–Ω–∞ –æ–∂–∏–¥–∞–µ–º–∞—è 404)")
                return True
            else:
                logger.error(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ç–∞—Ç—É—Å: {e.status}")
                return False
        except Exception as e:
            logger.error(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False
    
    async def create_ticket(self, tg_user: TgUser, message_text: str, chat_id: str, msg_id: str) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ —á–µ—Ä–µ–∑ API
        """
        logger.info(f"üé´ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_user.id}")
        
        ticket_id = str(uuid4())
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API
        ticket_data = {
            "id": ticket_id,
            "user_id": tg_user.id,
            "status": "open",
            "opened_at": datetime.now().isoformat(),
            "updated_at": datetime.now().isoformat()
        }
        
        message_data = {
            "id": str(uuid4()),
            "text": message_text,
            "ticket_id": ticket_id,
            "user_id": tg_user.id,
            "is_staff": False,
            "chat_id": chat_id,
            "msg_id": msg_id,
            "created_at": datetime.now().isoformat(),
            "attachments": []
        }
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç
            logger.info("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ —á–µ—Ä–µ–∑ API...")
            ticket_result = await self._send_api_request("POST", "ticket/add", ticket_data)
            logger.info(f"‚úÖ –¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω: {ticket_id}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.info("üí¨ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
            message_result = await self._send_api_request("POST", f"ticket/{ticket_id}/messages/add", message_data)
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∏–∫–µ—Ç {ticket_id}")
            
            return {
                "ticket": ticket_result,
                "message": message_result,
                "ticket_id": ticket_id
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞: {e}")
            raise
    
    async def add_message(self, ticket_id: str, tg_user: TgUser, message_text: str, 
                         chat_id: str, msg_id: str, is_staff: bool = False) -> Dict[str, Any]:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∏–∫–µ—Ç
        """
        logger.info(f"üì® –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–∏–∫–µ—Ç {ticket_id}")
        
        message_data = {
            "id": str(uuid4()),
            "text": message_text,
            "ticket_id": ticket_id,
            "user_id": tg_user.id,
            "is_staff": is_staff,
            "chat_id": chat_id,
            "msg_id": msg_id,
            "created_at": datetime.now().isoformat(),
            "attachments": []
        }
        
        try:
            result = await self._send_api_request("POST", f"ticket/{ticket_id}/messages/add", message_data)
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∏–∫–µ—Ç {ticket_id}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–∏–∫–µ—Ç {ticket_id}: {e}")
            raise
    
    async def add_message_with_attachments(self, ticket_id: str, tg_user: TgUser, 
                                          message_text: str, chat_id: str, msg_id: str,
                                          attachments: List[Dict[str, str]]) -> Dict[str, Any]:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏
        """
        logger.info(f"üìé –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å {len(attachments)} –≤–ª–æ–∂–µ–Ω–∏—è–º–∏ –≤ —Ç–∏–∫–µ—Ç {ticket_id}")
        
        message_data = {
            "id": str(uuid4()),
            "text": message_text,
            "ticket_id": ticket_id,
            "user_id": tg_user.id,
            "is_staff": False,
            "chat_id": chat_id,
            "msg_id": msg_id,
            "created_at": datetime.now().isoformat(),
            "attachments": attachments
        }
        
        try:
            result = await self._send_api_request("POST", f"ticket/{ticket_id}/messages/add", message_data)
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∏–∫–µ—Ç {ticket_id}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏: {e}")
            raise
    
    async def get_ticket(self, ticket_id: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–∫–µ—Ç–µ
        """
        logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ {ticket_id}")
        
        try:
            result = await self._send_api_request("GET", f"ticket/{ticket_id}")
            logger.info(f"‚úÖ –¢–∏–∫–µ—Ç {ticket_id} –ø–æ–ª—É—á–µ–Ω")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞ {ticket_id}: {e}")
            raise
    
    async def get_ticket_messages(self, ticket_id: str) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–∏–∫–µ—Ç–∞
        """
        logger.info(f"üí¨ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–∏–∫–µ—Ç–∞ {ticket_id}")
        
        try:
            ticket_data = await self.get_ticket(ticket_id)
            messages = ticket_data.get("messages", [])
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–∏–∫–µ—Ç–∞ {ticket_id}")
            return messages
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–∏–∫–µ—Ç–∞ {ticket_id}: {e}")
            raise
    
    async def get_user_tickets(self, user_id: int, status: str = None) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        TODO: –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤ API
        """
        logger.info(f"üìÇ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–∫–µ—Ç—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        # –í –±—É–¥—É—â–µ–º –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç /tickets?user_id=123
        logger.warning("‚ö†Ô∏è –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
        return []
    
    async def close_ticket(self, ticket_id: str, closed_by: TgUser) -> Dict[str, Any]:
        """
        –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞
        """
        logger.info(f"üîí –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞ {ticket_id}")
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏
            close_message = "–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"
            result = await self.add_message(
                ticket_id, closed_by, close_message, "system", str(uuid4()), True
            )
            
            logger.info(f"‚úÖ –¢–∏–∫–µ—Ç {ticket_id} –∑–∞–∫—Ä—ã—Ç")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞ {ticket_id}: {e}")
            raise